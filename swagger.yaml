openapi: "3.1.0"
info:
  description: |
    # Official documentation for the invo.space API.
    
    ## Glossary
    
    * Internal ID: identificator in invo.space
    * External ID: identificator in your or other system
    * Document: Expense, Invoice or Order.
    
    ## Common formats
    * UUID version 4
    * date-time is in ISO 
    * errors follow https://datatracker.ietf.org/doc/html/rfc7807

  version: "2.0.0"
  title: "invo.space"
  contact:
    email: "bros@codebros.cz"

servers:
  - url: "https://invo.space/api/v2"
    description: "Production server"

paths:
  /auth/signup:
    post:
      summary: "Sign up"
      description: |
          Creates a new user account. The user will receive an email with a link to set the password.
          The user will be logged in automatically after the account is created.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  description: Full name of the user
                  example: "John Doe"
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password

  /auth/token:
    post:
      summary: "Get JWT token"
      description: |
        Returns a JWT token for the given credentials.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "user"
                password:
                  type: string
                  example: "pass"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "1"
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1Ni"
                  expires:
                    type: string
                    format: date-time
                    example: "2023-03-01T00:00:00Z"
        400:
          $ref: "#/components/responses/ErrorResponse"
        401:
          $ref: "#/components/responses/ErrorResponse"

  /contacts:
    #    $ref: "./paths/contacts.yaml"
    get:
      tags:
        - contacts
      summary: "List Contacts"
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
      responses:
        200:
          description: "A list of Contacts."
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Participant"
                  total:
                    type: integer
                    description: Total number of Contacts
                    example: 93

    post:
      tags:
          - contacts
      summary: "Create new Contact"
      operationId: "createContact"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Participant'
      responses:
        200:
          description: Contact was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participant'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /contacts/{id}:
    get:
      tags:
        - contacts
      summary: Get single Contact
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: Identification of the Contact. As of now it is symbol of the Contact.
      responses:
        200:
          description: Contact with requested ID was found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Always 'ok'
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Internal ID of the Contact.
                        example: 37

  /currencies:
    get:
      tags:
        - currencies
      summary: List available currencies
      description: Returns a list of available currencies in the app.
      operationId: "getCurrencies"
      responses:
        200:
          description: "A list of Currencies."
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Currency"
                  total:
                    type: integer
                    description: Total number of Currencies
                    example: 3

  /expenses:
    #    $ref: "./paths/expenses.yaml"
    get:
      tags:
        - expenses
      summary: "List Expenses"
      description: "Returns a list of Expenses for a given year and optionally for a given month."
      operationId: "getExpenses"
      parameters:
        - $ref: "#/components/parameters/year"
        - $ref: "#/components/parameters/month"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
      responses:
        200:
          description: "A list of Expenses."
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Expense"
                  total:
                    type: integer
                    description: Total number of Expenses
                    example: 28

    post:
      tags:
        - expenses
      summary: "Create new Expense"
      #      description:
      operationId: "createExpense"
      requestBody:
        $ref: '#/components/requestBodies/CreateExpense'
      responses:
        200:
          description: Expense was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentIdentificationResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /expenses/{id}:
    get:
      tags:
        - expenses
      summary: Get single Expense
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: Identification of the Expense. As of now it is symbol of the Expense.
      responses:
        200:
          description: Expense with requested ID was found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Expense'
                  - type: object
                    properties:
                      permalink:
                        type: string
                        format: url
                        description: Permanent link leading to PDF version of the Expense.
                        example: /permalink/expense/9961d718-cae7-48e9-845d-e5c21f4ecdb3
        default:
          $ref: '#/components/responses/ErrorResponse'

  /invoices:
#    $ref: "./paths/invoices.yaml"
    get:
      tags:
        - invoices
      summary: "List Invoices"
      description: "Returns a list of Invoices for a given year and optionally for a given month."
      operationId: "getInvoices"
      parameters:
        - $ref: "#/components/parameters/year"
        - $ref: "#/components/parameters/month"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
      responses:
        200:
          description: "A list of Invoices."
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Invoice"
                  total:
                    type: integer
                    description: Total number of Invoices
                    example: 72

    post:
      tags:
        - invoices
      summary: "Create new Invoice"
#      description:
      operationId: "createInvoice"
      requestBody:
        $ref: '#/components/requestBodies/CreateInvoice'
      responses:
        200:
          description: Invoice was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentIdentificationResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /invoices/{id}:
    get:
      tags:
        - invoices
      summary: Get single Invoice
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: Identification of the Invoice. As of now it is symbol of the Invoice.
      responses:
        200:
          description: Invoice with requested ID was found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Invoice'
                  - type: object
                    properties:
                      permalink:
                        type: string
                        format: url
                        description: Permanent link leading to PDF version of the Invoice.
                        example: /permalink/invoice/9961d718-cae7-48e9-845d-e5c21f4ecdb3
        default:
          $ref: '#/components/responses/ErrorResponse'

    patch:
      tags:
        - invoices
      summary: Partially update Invoice
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: Identification of the Invoice is possible only via its UUID.
            example: '9961d718-cae7-48e9-845d-e5c21f4ecdb3'
      requestBody:
        $ref: '#/components/requestBodies/PatchInvoice'
      responses:
        200:
          description: Invoice was updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchDocumentResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

    put:
      tags:
        - invoices
      summary: Update Invoice
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: Identification of the Invoice is possible only via its UUID.
            example: '9961d718-cae7-48e9-845d-e5c21f4ecdb3'
      requestBody:
        $ref: '#/components/requestBodies/CreateInvoice'
      responses:
        200:
          description: Invoice was updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentIdentificationResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /orders:
    #    $ref: "./paths/orders.yaml"
    get:
      tags:
        - orders
      summary: "List Orders"
      description: "Returns a list of Orders for a given year and optionally for a given month."
      operationId: "getOrders"
      parameters:
        - $ref: "#/components/parameters/year"
        - $ref: "#/components/parameters/month"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
      responses:
        200:
          description: "A list of Orders."
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Order"
                  total:
                    type: integer
                    description: Total number of Orders
                    example: 12

    post:
      tags:
        - orders
      summary: "Create new Order"
      operationId: "createOrder"
      requestBody:
        $ref: '#/components/requestBodies/CreateOrder'
      responses:
        200:
          description: Order was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentIdentificationResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /orders/{id}:
    get:
      tags:
        - orders
      summary: Get single Order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: Identification of the Order. As of now it is symbol of the Order.
      responses:
        200:
          description: Order with requested ID was found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Order'
                  - type: object
                    properties:
                      permalink:
                        type: string
                        format: url
                        description: Permanent link leading to PDF version of the Order.
                        example: /permalink/order/9961d718-cae7-48e9-845d-e5c21f4ecdb3
        default:
          $ref: '#/components/responses/ErrorResponse'

  /document-sequences:
    get:
      tags:
        - document-sequences
      summary: List Document sequences of given type
      description: Returns a list of Document sequences of requested type for the authenticated user.
      operationId: "getDocumentSequences"
      parameters:
        -
          name: type
          in: query
          required: true
          schema:
            type: string
            enum:
              - invoice
              - order
              - expense

      responses:
        200:
          description: "A list of Document sequences."
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/DocumentSequence"
                  total:
                    type: integer
                    description: Total number of Document sequences
                    example: 1
    post:
      tags:
        - document-sequences
      summary: Create new Document sequence
      description: Returns a list of Document sequences for the authenticated user.
      operationId: "createDocumentSequence"
      responses:
        200:
          description: "Returns new Document sequence. Setting it as default will replace the current default."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentSequence"

  /document-sequences/{id}:
    get:
      tags:
        - document-sequences
      summary: Get single Document sequence
      description: Returns a Document sequence with requested ID.
      operationId: "getDocumentSequence"
      responses:
        200:
#          description: ""
          content:
            application/json:
              $ref: "#/components/schemas/DocumentSequence"
        404:
          description: "Document sequence with requested ID was not found"
          $ref: "#/components/responses/ErrorResponse"

    post:
      tags:
        - document-sequences
      summary: Update Document sequence
      description: Updates a Document sequence with requested ID. Setting it as default will replace the current default.
      operationId: "updateDocumentSequence"
      responses:
        200:
          #          description: ""
          content:
            application/json:
              $ref: "#/components/schemas/DocumentSequence"
        404:
          description: "Document sequence with requested ID was not found"
          $ref: "#/components/responses/ErrorResponse"

  /notifications:
    get:
      tags:
        - notifications
      summary: List Notifications
      description: Returns a list of Notifications for the authenticated user.
      operationId: "getNotifications"
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
      responses:
        200:
          description: "A list of Notifications."
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Notification"
                  total:
                    type: integer
                    description: Total number of Notifications
                    example: 3

  /settings:
    get:
      tags:
        - settings
      summary: Get account settings
      description: Returns a list of settings for the account of authenticated user.
      operationId: "getSettings"
      responses:
        200:
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Settings'

    patch:
      tags:
          - settings
      summary: Update account settings
      description: Updates a list of settings for the account of authenticated user.
      operationId: "updateSettings"
      requestBody:
        required: true
        content:
          application/json:
            schema:
            type: object
            properties:
              footnote:
                type: string
                description: Footnote that appears on the Documents
                example: "Thank you for your purchase."
              primaryCurrency:
                type: string
                description: ISO currency format.
                example: CZK
              alternativeCurrencies:
                type: array
                items:
                  type: string
                  description: ISO currency format.
                  example:
                    - EUR
                    - USD

      responses:
        204:
          description: Settings were updated successfully

components:
  schemas:
    Error:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: Unique identification of the error.
        status:
          type: integer
          description: HTTP status code for convenience.
        code:
          type: integer
          description: Numeric code uniquely identifying the error. Note that codes are NOT unique across endpoints.
          example:
            - 40001
        title:
          type: string
          description: Message uniquely identifying the error.
        detail:
          type: string
          description: Request specific description of the error.

    Address:
      type: object
      properties:
        address:
          type: string
          description: Street and house number
          example: Hradčanská 1
        city:
          type: string
          example: Praha
        zip:
          type: string
          description: Postal code
          example: 110 00
        country:
          type: string
          example: Česká Republika

    Currency:
      type: object
      properties:
        code:
          type: string
          description: ISO currency format.
          example: CZK
        name:
          type: string
          description: Full name of the currency
          example: Česká koruna
        symbol:
          type: string
          description: Symbol of the currency
          example: Kč

    Document:
      type: object
      properties:
        symbol:
          type: string
          example: '20230012'
        uuid:
          type: string
          format: uuid
          example: '9961d718-cae7-48e9-845d-e5c21f4ecdb3'
        issuedAt:
          type: string
          format: date-time
          description: Date of issuance that appears on the document
        deadlineAt:
          type: string
          format: date-time
          description: Date until when one wants the payment to be made
        paidAt:
          type: string
          format: date-time
          nullable: true
          description: Date of payment that appears on the document
        status:
          type: string
          enum:
            - issued
            - sent
            - paid
            - overdue
            - cancelled
          description: |
            Initial status of the document is `issued`.
            
            | Status | Description |
            | ------ | ----------- |
            | `issued` | document was created and is waiting for payment |
            | `sent` | document was sent to the customer |
            | `paid` | document was paid |
            | `overdue` | document is not paid and is past the deadline |
            | `cancelled` | document was cancelled |
        description:
          type: string
          nullable: true
          description: Line of text that appears above the list of document items
        vs:
          type: string
          format: numeric-string
          description: Variable symbol
        ss:
          type: string
          format: numeric-string
          description: Specific symbol
        ks:
          type: string
          format: numeric-string
          description: Constant symbol
        createdAt:
          type: string
          format: date-time
          description: Date of creation of the document
        updatedAt:
          type: string
          format: date-time
          nullable: true
          description: Date of last modification of the document
        customer:
          $ref: '#/components/schemas/Participant'
        supplier:
          $ref: '#/components/schemas/Participant'
        beneficiary:
          nullable: true
          anyOf:
            - $ref: '#/components/schemas/Participant'
        items:
          type: array
          items:
            $ref: '#/components/schemas/DocumentItem'
        currency:
          type: string
          description: ISO currency format.
          example: CZK

    DocumentItem:
      type: object
      required:
        - amount
        - unit
        - description
        - unitPriceTaxFree
        - unitTax
        - unitPrice
        - totalPriceTaxFree
        - totalTax
        - totalPrice
      properties:
        amount:
          type: number
          format: float
          description: Quantity of the item
        unit:
          type: string
          description: Unit of the item
          example:
            - h
            - MD
            - x
            - ks
        description:
          type: string
          description: Description of the item
        unitPriceTaxFree:
          description: Price excluding VAT of a single unit of the item. Is the same as unit unitPrice if no VAT is defined.
          allOf: # todo this nest is a hack for openapi 3.0, see https://github.com/OAI/OpenAPI-Specification/issues/1514#issuecomment-1386613645
            - $ref: "#/components/schemas/Money"
        unitTax:
          description: Tax on a single unit of the item. Is be zero if no VAT is defined.
          allOf:
            - $ref: "#/components/schemas/Money"
        unitPrice:
          description: Unit price of a single unit of the item
          allOf:
            - $ref: "#/components/schemas/Money"
        taxRate:
          type: integer
          description: Tax rate applied on the item
        totalPriceTaxFree:
          description: Price excluding VAT of the whole item. Is the same as unit totalPrice if no VAT is defined.
          allOf:
            - $ref: "#/components/schemas/Money"
        totalTax:
          description: Tax on the whole item. Is be zero if no VAT is defined.
          allOf:
            - $ref: "#/components/schemas/Money"
        totalPrice:
          description: Total price of the whole item
          allOf:
            - $ref: "#/components/schemas/Money"

    DocumentItem_Create:
      type: object
      required:
        - amount
        - unit
        - description
        - unitPrice
      properties:
        amount:
          type: number
          format: float
          description: Quantity of the item
        unit:
          type: string
          description: Unit of the item
          example:
            - h
            - MD
            - x
            - ks
        description:
          type: string
          description: Description of the item
        unitPrice:
          description: Price of a single unit of the item.
          allOf: # todo this nest is a hack for openapi 3.0, see https://github.com/OAI/OpenAPI-Specification/issues/1514#issuecomment-1386613645
            - $ref: "#/components/schemas/Money"
        taxRate:
          type: integer
          description: Tax rate applied on the item. Required for VAT payer.
        computation:
          type: string
          enum:
            - bottomUp
            - topDown
          description: |
            Method of computation of the price including tax. Default value is `bottomUp`.
            `bottomUp` means that the price is provided as base and tax is added to it.
            `topDown` means that the price is provided as total and tax is deducted from it.
            Value is irrelevant for non-VAT payers.

    Expense:
      allOf:
        - $ref: '#/components/schemas/Document'
        - type: object
          required:
            - expenseType
            - receivedAt
          properties:
            expenseType:
              type: string
              enum:
                - invoice
                - receipt
                - other
            receivedAt:
              type: string
              format: date-time
              description: Date the receipt/invoice was received
            taxableAt:
              type: string
              format: date-time
              description: Date of VAT applicability (DUZP in CZE)
            attachment:
              type: string
              format: binary
              description: File attachment of the expense, e.g. PDF invoice, photo of receipt, etc.
            vatDeductible:
              type: boolean
              description: Whether the VAT is deductible or not. Only for VAT payers.
            vatDeductionProportionPercent:
              type: number
              format: decimal
              description: Proportion of VAT deduction in percent. Only for VAT payers.

    Invoice:
      allOf:
        - $ref: '#/components/schemas/Document'
        - type: object
          properties:
            taxableAt:
              type: string
              format: date-time
              description: Date of VAT applicability (DUZP in CZE)
            order:
              type: string
              nullable: true
              description: Reference to Order ID.

    Order:
      allOf:
        - $ref: '#/components/schemas/Document'

    Money:
      type: object
      properties:
        amount:
          type: string
          description: Amount of currency in cents, e.g. 1000 means 10.00 EUR
          example: 1250
        currency:
          type: string
          description: ISO currency format.
          example: EUR

    DocumentSequence:
      type: object
      required:
        - type
        - name
        - prefix
        - format
        - sequenceLength
        - default
      properties:
        id:
          type: string
          description: ID of the DocumentSequence in `seq_<string>` KSUID format.
          example: seq_2udYHpoPWQeAazs1GOWA7BEZxUc
        type:
          type: string
          description: Type of the document sequence is for
          enum:
            - invoice
            - order
            - expense
        name:
          type: string
          description: Name of the document sequence
          example: Default sequence
        prefix:
          type: string
          description: Prefix of the document sequence
          example: "N"
        format:
          type: string
          format: string
          description: Format of the Document sequence. `Y` is for full year (e.g. 2025), `y` is for short year (e.g. 25), `m` is for month (e.g. 03), `d` is for day (e.g. 12).
          example:
            - "Y"
            - "Ym9"
        sequenceLength:
          type: integer
          min: 3
          max: 7
          description: How many digits the sequence number has
        default:
          type: boolean
          description: Whether the sequence is default for the account

    Notification:
      type: object
      required:
        - type
        - title
        - content
        - createdAt
      properties:
        type:
          type: string
          description: Type of the notification
          enum:
            - info
            - warning
            - error
            - success
        title:
          type: string
          description: Title of the notification
          example: Invoice 20250012 was paid
        content:
          type: string
          description: Long description of the notification
          example: Invoice with symbol 20250012 was paid on 2025-03-12.
        createdAt:
          type: string
          format: date-time
          description: Date when notification was created
          example: 2025-03-12T15:23:34Z
        readAt:
          type: string
          format: date-time
          nullable: true
          description: Date of reading the notification

    Participant:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          description: ID of the Participant in `part_<string>` KSUID format.
          example: part_192
        name:
          type: string
          description: Full name of the participant
        company:
          type: string
          description: Optional company name of the participant. If filled, appears on the invoice instead of name.
        email:
          type: string
          format: email
          example: email@example.com
        phone:
          type: string
          example: 603112233
        ico:
          type: string
          nullable: true
          description: Company identification number, may not be present (e.g. end consumer)
          example: 45274649
        dic:
          type: string
          nullable: true
          description: Tax identification number (TIN), may not be presenter
          example: CZ45274649
        accountNumber:
          type: string
          description: Account number including bank code
          example: 1234567890/0000
        iban:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/Address'

    Settings:
      type: object
      required:
        - footnote
        - participantId
        - participant
        - vatPayer
        - signature
        - primaryCurrency
        - alternativeCurrencies
        - yearOfRegistration
      properties:
        footnote:
          type: string
          description: Footnote that appears on the Documents
          example: "Thank you for your purchase."
          nullable: true
        participantId:
          type: string
          description: ID of the Participant that is used for the Documents. `null` if not set yet, e.g. after first login.
          example: "part_123"
          nullable: true
        participant:
          type: object
          description: Supplier information that is used for the Documents. `null` if not set yet, e.g. after first login.
          $ref: "#/components/schemas/Participant"
          nullable: true
        vatPayer:
          type: string
          enum:
            - identifiedPerson
            - noVatPayer
            - vatPayer
        signature:
          type: string
          description: |
            File name of the watermark that appears on the Documents.
            Uploaded image should contain stamp or signature.
          nullable: true
        primaryCurrency:
          type: string
          description: ISO currency format.
        alternativeCurrencies:
          type: array
          items:
            type: string
            description: ISO currency format.
          nullable: true
        yearOfRegistration:
          type: integer
          description: Year of registration of the account, used for determining what years are in year paginator.
          example: 2023

    CreateDocumentRequest:
      type: object
      required:
        - customer
        - deadlineAt
        - items
      properties:
        symbol:
          description: Actually a custom symbol (identification) of the Document from your system
          type: string
          nullable: true
        customer:
          anyOf:
            - type: string
              description: Internal ID of Customer
            - $ref: '#/components/schemas/Participant'
        beneficiary:
          nullable: true
          description: Beneficiary feature must be enabled for the account.
          anyOf:
            - type: string
              description: Internal ID of customer
            - $ref: '#/components/schemas/Participant'
        issuedAt:
          nullable: true
          type: string
          format: date-time
          description: |
            Date of issuance that appears on the document. 
            May be provided in relative format, e.g. '+1 day'.
            Current date if not provided.
        paidAt:
          nullable: true
          type: string
          format: date-time
          description: |
            Date of payment that appears on the document. 
            May be provided in relative format, e.g. '+1 day'.  
            Invoice will not be marked as paid if not provided or null.
        deadlineAt:
          type: string
          format: date-time
          description: |
            Date until when one wants the payment to be made. 
            May be provided in relative format, e.g. '+15 days'.
        description:
          type: string
          description: Line of text that appears above the list of document items.
        vs:
          type: string
          description: Variable symbol
        ss:
          type: string
          description: Specific symbol
        ks:
          type: string
          description: Constant symbol
        currency:
          type: string
          description: ISO currency format.
          example: CZK
        items:
          type: array
          items:
            $ref: '#/components/schemas/DocumentItem_Create'
          minItems: 1

    DocumentIdentificationResponse:
      type: object
      properties:
        id:
          type: string
          description: Internal ID of the created Document. Currently it is sequence number of the Document.
          example: 20230001
        symbol:
          type: string
          description: Sequence number of the created Document.
          example: 20230001
        uuid:
          type: string
          format: uuid
          description: UUID of the created Document.
          example: 9961d718-cae7-48e9-845d-e5c21f4ecdb3
        permalink:
          type: string
          format: url
          description: Permanent link leading to PDF version of the Document.

    PatchDocumentRequest:
      type: object
      properties:
        customer:
          anyOf:
            - type: string
              description: Internal ID of Customer
            - $ref: '#/components/schemas/Participant'
        beneficiary:
          nullable: true
          description: Beneficiary feature must be enabled for the account.
          anyOf:
            - type: string
              description: Internal ID of customer
            - $ref: '#/components/schemas/Participant'
        issuedAt:
          type: string
          format: date-time
          description: |
            Date of issuance that appears on the document. 
            May be provided in relative format, e.g. '+1 day'.
            Current date if not provided.
        paidAt:
          nullable: true
          type: string
          format: date-time
          description: |
            Date of payment that appears on the document. 
            May be provided in relative format, e.g. '+1 day'.  
            Invoice will not be marked as paid if not provided or null.
        deadlineAt:
          type: string
          format: date-time
          description: |
            Date until when one wants the payment to be made. 
            May be provided in relative format, e.g. '+15 days'.
        sentAt:
          type: string
          format: date-time
          description: |
            Date of document submission to the customer.
            Setting this field influences whether the status of the document is `issued` or `sent` (if `paidAt` field is null and not past deadline).
        description:
          type: string
          description: Line of text that appears above the list of document items.
        vs:
          type: string
          description: Variable symbol
        ss:
          type: string
          description: Specific symbol
        ks:
          type: string
          description: Constant symbol
        currency:
          type: string
          description: ISO currency format.
          example: CZK
        items:
          type: array
          description: Items will be replaced as a whole.
          items:
            $ref: '#/components/schemas/DocumentItem_Create'
          minItems: 1

    PatchDocumentResponse:
      type: object
      properties:
        id:
          type: string
          description: Internal ID of the created Document. Currently it is sequence number of the Document.
          example: 20230001
        symbol:
          type: string
          description: Sequence number of the created Document.
          example: 20230001
        uuid:
          type: string
          format: uuid
          description: UUID of the created Document.
          example: 9961d718-cae7-48e9-845d-e5c21f4ecdb3
        permalink:
          type: string
          format: url
          description: Permanent link leading to PDF version of the Document.

  parameters:
    year:
      name: year
      in: query
      required: false
      schema:
        type: integer
        description: Year in four digit format YYYY
        example: 2023
    month:
      name: month
      in: query
      required: false
      schema:
        type: integer
        description: Month in non-zerofilled format
        example:
          - 3
          - 12
    limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        default: null
        description: Number of items to return
        example: 10
        nullable: true
    offset:
      name: offset
      in: query
      required: false
      schema:
        type: integer
        default: 0
        description: Number of items to skip
        example: 10

  requestBodies:
    CreateExpense:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/CreateDocumentRequest'
              - type: object
                required:
                  - expenseType
                  - receivedAt
                properties:
                    expenseType:
                        type: string
                        enum:
                        - invoice
                        - receipt
                        - other
                    receivedAt:
                      type: string
                      format: date-time
                      description: Date the receipt/invoice was received
                    taxableAt:
                      nullable: true
                      type: string
                      format: date-time
                      description: |
                        Date of VAT applicability.
                        Required for invoices created by VAT payers. Not allowed for non-VAT payers.
                    attachment:
                        type: string
                        format: binary
                        description: File attachment of the expense, e.g. PDF invoice, photo of receipt, etc.
                    vatDeductible:
                        type: boolean
                        description: Whether the VAT is deductible or not. Only for VAT payers.
                    vatDeductionProportionPercent:
                        type: number
                        format: decimal
                        description: Proportion of VAT deduction in percent. Only for VAT payers.

    CreateInvoice:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/CreateDocumentRequest'
              - type: object
                properties:
                  order:
                    type: string
                    nullable: true
                    description: Reference to Internal Order ID.
                  taxableAt:
                    nullable: true
                    type: string
                    format: date-time
                    description: |
                      Date of VAT applicability.
                      May be provided in relative format, e.g. '+1 day'.
                      Required for invoices created by VAT payers. Not allowed for non-VAT payers.

    CreateOrder:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - document
            properties:
              document:
                $ref: '#/components/schemas/CreateDocumentRequest'
              email:
                type: object
                required:
                  - recipient
                  - replyTo
                  - subject
                  - messageText
                properties:
                  recipient:
                    type: string
                    format: email
                  replyTo:
                    type: string
                    format: email
                  cc:
                    type: array
                    items:
                      type: string
                      format: email
                  subject:
                    type: string
                    example: Thank you for your order
                  messageText:
                    type: string
                    example: |
                      Hello,
                      
                      thank you for your order. Please see the attached order with payment information.

    PatchInvoice:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/PatchDocumentRequest'
              - type: object
                properties:
                  order:
                    type: string
                    nullable: true
                    description: Reference to Internal Order ID.
                  taxableAt:
                    nullable: true
                    type: string
                    format: date-time
                    description: |
                      Date of VAT applicability.
                      May be provided in relative format, e.g. '+1 day'.
                      Required for invoices created by VAT payers. Not allowed for non-VAT payers.

    PatchOrder:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PatchDocumentRequest'

  responses:
    ErrorResponse:
      description: General error response for all endpoints
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: There was an error authenticating a request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

webhooks:
  invoicePaid:
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                event:
                  type: string
                  enum:
                    - invoicePaid
                payload:
                  type: object
                  required:
                    - symbol
                    - dateOfPayment
                  properties:
                    symbol:
                      type: string
                      description: Symbol of the paid Invoice
                    orderSymbol:
                      type: string
                      nullable: true
                      description: Symbol of the associated Order
                    customSymbol:
                      type: string
                      nullable: true
                    dateOfPayment:
                      type: string
                      format: date-time
      responses:
        200:
          description: Indicate that the data was received successfully

security:
  - bearerAuth: []
